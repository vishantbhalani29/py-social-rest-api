"""
Django settings for nexify project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

import sentry_sdk
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

dotenv_path = os.path.join(BASE_DIR, ".env")
load_dotenv(dotenv_path=dotenv_path)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.getenv("DEBUG", 0)))

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS").split(",")

PROJECT_DIR = "nexify"

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "django_filters",
    "drf_spectacular",
    "debug_toolbar",
    "rest_framework_simplejwt",
    # App modules
    "nexify.domain.user",
    "nexify.domain.post",
    "nexify.domain.file",
    "custom_admin",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

ROOT_URLCONF = "nexify.interface.urls"

CUSTOM_ADMIN_TEMPLATES = os.path.join(BASE_DIR, "custom_admin", "templates")

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [CUSTOM_ADMIN_TEMPLATES],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}


# Swagger settings

API_SWAGGER_URL = os.getenv("API_SWAGGER_URL")

SPECTACULAR_SETTINGS = {
    "TITLE": "Nexify",
    "DESCRIPTION": "Engineering a social media platform using Django and DRF, focusing on the implementation of robust DDD principles.",
    "TOS": None,
    # Optional: MAY contain "name", "url", "email"
    "CONTACT": {"name": "", "email": ""},
    "VERSION": "0.1.0",
    "SCHEMA_PATH_PREFIX": r"/api/v[0-9]",
}

WSGI_APPLICATION = "nexify.drivers.wsgi.application"

AUTH_USER_MODEL = "user.User"


# Sentry initialization
if not DEBUG:
    sentry_sdk.init(
        dsn=os.getenv("SENTRY_DNS"),
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for performance monitoring.
        traces_sample_rate=1.0,
        # Set profiles_sample_rate to 1.0 to profile 100%
        # of sampled transactions.
        # We recommend adjusting this value in production.
        profiles_sample_rate=1.0,
    )


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.getenv("DB_ENGINE"),
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


ACCESS_TOKEN_LIFETIME = int(os.getenv("ACCESS_TOKEN_LIFETIME"))
REFRESH_TOKEN_LIFETIME = int(os.getenv("REFRESH_TOKEN_LIFETIME"))

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=ACCESS_TOKEN_LIFETIME),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=REFRESH_TOKEN_LIFETIME),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
}


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static").replace("\\", "/")

STATICFILES_DIRS = [os.path.join(BASE_DIR, "custom_admin", "static")]

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


GENERAL_ERROR_MESSAGE = os.environ.get("GENERAL_ERROR_MESSAGE")

PASSWORD_REGEX = r"{}".format(os.environ.get("PASSWORD_REGEX"))

ALLOWED_FILE_EXTENSIONS = os.getenv("ALLOWED_FILE_EXTENSIONS").split(",")


# Twilio SendGrid

CLIENT_HOST = os.getenv("CLIENT_HOST")
EMAIL_FROM_NAME = os.getenv("EMAIL_FROM_NAME")
EMAIL_FROM_ADDRESS = os.getenv("EMAIL_FROM_ADDRESS")

SENDGRID_API_KEY = os.getenv("SENDGRID_API_KEY")
EMAIL_BACKEND = os.getenv("EMAIL_BACKEND")
SENDGRID_SANDBOX_MODE_IN_DEBUG = False

EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("SENDGRID_API_KEY")


# Forgot password

FORGOT_PASSWORD_EXP_TIME = int(os.getenv("FORGOT_PASSWORD_EXP_TIME"))
FORGOT_PASSWORD_SECRETE = os.getenv("FORGOT_PASSWORD_SECRETE")
FORGOT_PASSWORD_ROUTE = os.getenv("FORGOT_PASSWORD_ROUTE")
FORGOT_PASSWORD_SUBJECT = os.getenv("FORGOT_PASSWORD_SUBJECT")
FORGOT_PASSWORD_EMAIL_TEMPLATE = os.getenv("FORGOT_PASSWORD_EMAIL_TEMPLATE")

# Post delete

POST_DELETE_SUBJECT = os.getenv("POST_DELETE_SUBJECT")
POST_DELETE_EMAIL_TEMPLATE = os.getenv("POST_DELETE_EMAIL_TEMPLATE")


# MinIO

DEFAULT_FILE_STORAGE = os.getenv("DEFAULT_FILE_STORAGE")

MINIO_STORAGE_ACCESS_KEY = os.getenv("MINIO_STORAGE_ACCESS_KEY")
MINIO_STORAGE_SECRET_KEY = os.getenv("MINIO_STORAGE_SECRET_KEY")
MINIO_STORAGE_MEDIA_BUCKET_NAME = os.getenv("MINIO_STORAGE_MEDIA_BUCKET_NAME")
MINIO_STORAGE_ENDPOINT = os.getenv("MINIO_STORAGE_ENDPOINT")

AWS_ACCESS_KEY_ID = MINIO_STORAGE_ACCESS_KEY
AWS_SECRET_ACCESS_KEY = MINIO_STORAGE_SECRET_KEY
AWS_STORAGE_BUCKET_NAME = MINIO_STORAGE_MEDIA_BUCKET_NAME
AWS_S3_ENDPOINT_URL = MINIO_STORAGE_ENDPOINT
AWS_DEFAULT_ACL = None
AWS_QUERYSTRING_AUTH = True


# Celery Configuration

CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND")
CELERY_TASK_TRACK_STARTED = bool(int(os.getenv("CELERY_TASK_TRACK_STARTED")))
CELERY_TIMEZONE = TIME_ZONE


# Desired recommend post size
RECOMMEND_POST_SIZE = 5
